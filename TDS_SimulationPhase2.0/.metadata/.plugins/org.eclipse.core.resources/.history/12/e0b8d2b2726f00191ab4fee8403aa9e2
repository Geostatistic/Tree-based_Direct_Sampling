package clusterTreeSimulation;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import java.util.TreeMap;

public class Main_Denmark_ClusterTreeSimulation3D_PatternBased_II
{
	public static void main(String arg[]) throws IOException
	{
		System.out.println("Denmark groundwater case: k-means cluster tree extra-search pattern-based 3D mission begin !");
		System.out.println(new Date());
		
		// categorical variable -1 unknown -999 unprocessed
		final int UnknownValueLabel = -1;
		//final int UnsimulationLabel = -999;
		
		final int RealizationAmount = 1;
//		final int FaciesNumber = 3;
//		final double SampleRate = 0.005;
		final int Layer_R = 39;
		final int Height_R = 133;
		final int Width_R = 229;
		
		// DS parameters
		final int DS_MaxRadius = 4;
		final int DS_Neighborhood = 30;
		final double DS_Threshold = 0.025;
		final double DS_Fraction = 0.2;
		
		// primary and secondary variable
		final double weight1 = 0.5;
		final double weight2 = 1 - weight1;
		
		// tree parameters
		final int Tree_Height = 11;
		
		// the tree search scope
		final int minimumComputation = 128;
		
		// pattern based CTS
		final double PointPatternSlope = 0.05;
				
		// analyze the distance
		double distance_print_primary_Mean = 0.00;
		final int distance_print_Amount = 10000;
		int simulationPointCounter = 0;
		int searchCounter = 0;
		
		final int TI_Layer = 39;
		final int TI_Height = 133;
		final int TI_Width = 229;
		TrainingImage3D TI0 = new TrainingImage3D(TI_Layer, TI_Height, TI_Width);
		TI0.ReadPrimaryTrainingImageTxt(new String("z_DenmarkGroundwater_3D_TrainingImage.txt"));

		SoftData3D soft_TI = new SoftData3D(TI_Layer, TI_Height, TI_Width);
		soft_TI.ReadSoftDataTxt(new String("z_DenmarkGroundwater_3D_SoftData_Uniform.txt"));
		//double softMaxDifference = soft_TI.GetMaxDifference((double)(UnsimulationLabel+1));
		double softMaxDifference = 1 - 0.542189;  // this value is generated by artificial manipulation according to histogram
		
		final String affix = new String("z_DenmarkGroundwater_3D");
		ClusterTree3D tree = new ClusterTree3D();
		tree.ReadClusterTreeFile(affix);
		tree.ReadClusterTreeLeafNodeFile(Tree_Height, TI_Height, TI_Width, affix);
		
		Realization3D realization_Original = new Realization3D(Layer_R,Height_R,Width_R);
		Realization3D realization_distancetoHardData = new Realization3D(Layer_R,Height_R,Width_R);
		Realization3D realization = new Realization3D(Layer_R,Height_R,Width_R);
		realization_Original.ReadRealizationFile(new String("z_DenmarkGroundwater_3D_SimulationDomain.txt"));
		realization_distancetoHardData.ReadRealizationFile(new String("z_DenmarkGroundwater_3D_SimulationDomain.txt"));
		realization_Original.ReadHardData(new String("z_DenmarkGroundwater_3D_HardData.txt"));
		//realization_Original.PrintOut_SGeMS(new String("z_DenmarkGroundwater_3D_HardData.sgems"),Layer_R,Height_R,Width_R,new String("hydroUnit"));
		final int unknownAmount = realization_Original.GetValueAmount(UnknownValueLabel); // -1 is the unknown point
		System.out.println(new String("the number of unknown points is "+unknownAmount));
		
		SoftData3D soft_SG = new SoftData3D(Layer_R,Height_R,Width_R);
		soft_SG.ReadSoftDataTxt(new String("z_DenmarkGroundwater_3D_SoftData_Uniform.txt"));
		
		double[][][] distanceImage = new double[TI_Layer][TI_Height][TI_Width];
		int realizationIndex=0,unknownIndex=0,unknownX=0,unknownY=0,unknownZ=0,unknownValue=0;
		int currentHeight = 0,representativeX=0, representativeY=0, representativeZ=0,testClusterAmount=0;
		int solutionX=0,solutionY=0,solutionZ=0,pasteSize_z=0,pasteSize_y=0,pasteSize_x=0,xx=0,yy=0,zz=0;
		int extraSearchAmount=0,extraSearchIndex=0,extraSearchScope=0,extraSearchRandom=0;
		int extraSearch_ClusterIndex_Deviation = (1<<Tree_Height)-2;
		double distance0=0.0,distance1=0.0,distance2=0.0,distance0_Min=0.0,preference=0.0;
		boolean finishSearch = false;
		
		Random random = new Random();
		PatternDS_3D pattern_DS = new PatternDS_3D();
		ArrayList<Integer> testCluster = new ArrayList<Integer>();
		TreeMap<Double,Integer> testClusterPreference= new TreeMap<Double,Integer>();
				
		for(unknownZ=0;unknownZ!=Layer_R;++unknownZ)
		{
			for(unknownY=0;unknownY!=Height_R;++unknownY)
			{
				for(unknownX=0;unknownX!=Width_R;++unknownX)
				{
					unknownValue = realization_Original.GetValue(unknownZ, unknownY, unknownX);
					if(unknownValue > -1)
					{
						// the distance to hard data is zero
						realization_distancetoHardData.SetValue(unknownZ, unknownY, unknownX, 0);
					}
				}
			}
		}
		realization_distancetoHardData.DilateDistance();
		// realization_distancetoHardData.PrintOut_SGeMS(new String("z_DenmarkGroundwater_distanceWithHardData.sgems"),Layer_R,Height_R,Width_R,new String("distance"));
		
		// record the running time
		Date end = new Date();
		int CostTime = 0;
		
		// 3D simulations
		System.out.println("3D simulations begin !");
		System.out.println(new Date());
		Date start = new Date();
		for(realizationIndex=0;realizationIndex!=RealizationAmount;++realizationIndex)
		{
			System.out.println("realization"+realizationIndex);
			System.out.println(new Date());
			realization.SetRealizationMatrix(realization_Original.GetRealizationMatrix());
			realization.SetExtractOrder(DS_MaxRadius);
			unknownIndex = 0;
			simulationPointCounter = 0;
			searchCounter = 0;
			while(unknownIndex < unknownAmount)
			{
				unknownZ = Math.abs(random.nextInt()%Layer_R);
				unknownY = Math.abs(random.nextInt()%Height_R);
				unknownX = Math.abs(random.nextInt()%Width_R);
				if(realization.GetValue(unknownZ, unknownY, unknownX) == UnknownValueLabel)
				{
					pattern_DS = new PatternDS_3D(realization.GetPattern_DS(unknownZ, unknownY, unknownX, DS_Neighborhood, DS_MaxRadius, UnknownValueLabel));
					if(pattern_DS.GetKnownPointAmount()==0)
					{
						continue;
					}
					else
					{
						// System.out.println(unknownIndex);
						// initialization
						distanceImage = new double[Layer_R][Height_R][Width_R];
						testCluster.clear();
						testCluster.add(0);
						testCluster.add(1);
						distance0_Min = 10.0;
						
						finishSearch = false;
						
						for(currentHeight=1;currentHeight<=Tree_Height;++currentHeight)
						{
							testClusterPreference.clear();
							for(int testClusterIndex : testCluster)
							{
								// get the coordinate of representative
								representativeX = tree.GetCoordinate_X(testClusterIndex);
								representativeY = tree.GetCoordinate_Y(testClusterIndex);
								representativeZ = tree.GetCoordinate_Z(testClusterIndex);
								
								if(representativeX == -1)
								{
									continue;
								}								
								// calculate the distance between training pattern and conditioning pattern
								if(distanceImage[representativeZ][representativeY][representativeX]>0.0)
								{
									distance0 = distanceImage[representativeZ][representativeY][representativeX];
								}
								else
								{
									distance1 = TI0.GetPatternDistance_Hamming(representativeZ, representativeY, representativeX, pattern_DS);
									distance2 = Math.abs(soft_SG.GetValue(unknownZ, unknownY, unknownX) - soft_TI.GetValue(representativeZ, representativeY, representativeX));
									distance2 = distance2 / softMaxDifference;
									distance0 = weight1 * distance1 + weight2 * distance2;
								}
								
								// is the training pattern satisfied?
								if(distance0 < DS_Threshold)
								{
									solutionZ = representativeZ;
									solutionY = representativeY;
									solutionX = representativeX;
									distance0_Min = distance0;
									finishSearch = true;
									break;
								}
								else if(distance0 < distance0_Min)
								{
									solutionZ = representativeZ;
									solutionY = representativeY;
									solutionX = representativeX;
									distance0_Min = distance0;
								}
								distanceImage[representativeZ][representativeY][representativeX] = distance0;
								
								// calculate the preference (also termed indicator)
								preference = distance0 / tree.GetInnerDistance(testClusterIndex);
								if(testClusterPreference.containsKey(preference))
								{
									testClusterPreference.put(preference-0.0000000001, testClusterIndex);
								}
								else
								{
									testClusterPreference.put(preference, testClusterIndex);
								}
							}
							if(finishSearch == true)
							{
								break;
							}
							else if (currentHeight!=Tree_Height)
							{
								// proceed to the next layer of tree
								testClusterAmount = Math.max(minimumComputation,testCluster.size());
								testCluster.clear();
								for(int mapvalue : testClusterPreference.values())
								{
									testCluster.add(2*mapvalue+2);
									testCluster.add(2*mapvalue+3);
									if(testCluster.size()==testClusterAmount)
										break;
								}
							}
						}
						// carry out the extra search
						if(finishSearch == false)
						{
							for(int testClusterIndex : testCluster)
							{
								extraSearchAmount = tree.GetMemberPatternSize(testClusterIndex-extraSearch_ClusterIndex_Deviation);
								extraSearchScope = (int)((double)extraSearchAmount * DS_Fraction);
								for(extraSearchIndex=0;extraSearchIndex!=extraSearchScope;++extraSearchIndex)
								{
									extraSearchRandom = Math.abs(random.nextInt()%extraSearchAmount);
									representativeX = tree.GetMemberPattern_X(testClusterIndex-extraSearch_ClusterIndex_Deviation, extraSearchRandom);
									representativeY = tree.GetMemberPattern_Y(testClusterIndex-extraSearch_ClusterIndex_Deviation, extraSearchRandom);
									representativeZ = tree.GetMemberPattern_Z(testClusterIndex-extraSearch_ClusterIndex_Deviation, extraSearchRandom);
									if(distanceImage[representativeZ][representativeY][representativeX]>0.0)
										continue;
									else
									{
										distance1 = TI0.GetPatternDistance_Hamming(representativeZ, representativeY, representativeX, pattern_DS);
										distance2 = Math.abs(soft_SG.GetValue(unknownZ, unknownY, unknownX) - soft_TI.GetValue(representativeZ, representativeY, representativeX));
										distance2 = distance2 / softMaxDifference;
										distance0 = weight1 * distance1 + weight2 * distance2;
										// is the training pattern satisfied?
										if(distance0 < DS_Threshold)
										{
											solutionZ = representativeZ;
											solutionY = representativeY;
											solutionX = representativeX;
											distance0_Min = distance0;
											finishSearch = true;
											break;
										}
										else if(distance0 < distance0_Min)
										{
											solutionZ = representativeZ;
											solutionY = representativeY;
											solutionX = representativeX;
											distance0_Min = distance0;
										}
										distanceImage[representativeZ][representativeY][representativeX] = distance0;
									}
								}
							}
						}

						distance_print_primary_Mean += distance0_Min;
						++searchCounter;

						if((unknownIndex - simulationPointCounter) > distance_print_Amount)
						{
							System.out.println(distance_print_primary_Mean/(double)searchCounter);
							distance_print_primary_Mean = 0.0;
							searchCounter = 0;
							simulationPointCounter = unknownIndex;
						}
						
						// paste a pattern
						pasteSize_z = (int)((double)(realization_distancetoHardData.GetValue(unknownZ, unknownY, unknownX)) * (double)(PointPatternSlope));
						pasteSize_y = (int)((double)(realization_distancetoHardData.GetValue(unknownZ, unknownY, unknownX)) * (double)(PointPatternSlope));
						pasteSize_x = (int)((double)(realization_distancetoHardData.GetValue(unknownZ, unknownY, unknownX)) * (double)(PointPatternSlope));
						
						for(zz=-pasteSize_z;zz!=pasteSize_z+1;++zz)
						{
							for(yy=-pasteSize_y;yy!=pasteSize_y+1;++yy)
							{
								for(xx=-pasteSize_x;xx!=pasteSize_x+1;++xx)
								{
									if(unknownZ+zz>=0 && unknownZ+zz<Layer_R && unknownY+yy>=0 && unknownY+yy<Height_R && unknownX+xx>=0 && unknownX+xx<Width_R)
									{
										if(realization.GetValue(unknownZ+zz, unknownY+yy, unknownX+xx) != UnknownValueLabel)
										{
											continue;
										}
										if(solutionZ+zz>=0 && solutionZ+zz<Layer_R && solutionY+yy>=0 && solutionY+yy<Height_R && solutionX+xx>=0 && solutionX+xx<Width_R)
										{
											unknownValue = TI0.GetValue(solutionZ+zz,solutionY+yy, solutionX+xx);
											realization.SetValue(unknownZ+zz, unknownY+yy, unknownX+xx, unknownValue);
											++unknownIndex;
										}
									}
								}
							}
						}
						//paste pattern end
					}
				}
			}
			realization.PrintOut_SGeMS(new String("z_DenmarkGroundwater_PatternTDS"+realizationIndex+".sgems"),Layer_R,Height_R,Width_R,new String("hydroUnit"));
			end = new Date();
			CostTime = (int) (end.getTime()-start.getTime())/1000;
			System.out.println(new String("The program costs "+ CostTime + " seconds so far"));
		}
		System.out.println(new Date());
		end = new Date();
		CostTime = (int) (end.getTime()-start.getTime())/1000;
		System.out.println(new String("The simulation procedure costs "+ CostTime + " seconds"));
		System.out.println(new String("The whole procedure have been accomplished !"));
		return;
		
	}
}
